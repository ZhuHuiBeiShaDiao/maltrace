[preassign]
code: /* This should appear as pre-hook code */
[postassign]
code: /* Definitions are taken from http://drmemory.googlecode.com/svn/trunk/wininc/afd_shared.h */
	/* IOCTL Generation */
	#define FSCTL_AFD_BASE                  FILE_DEVICE_NETWORK
	#define _AFD_CONTROL_CODE(Operation,Method) ((FSCTL_AFD_BASE)<<12 | (Operation<<2) | Method)
 
	/* AFD Commands */
	#define AFD_BIND            0
	#define AFD_CONNECT              1
	#define AFD_START_LISTEN         2
	#define AFD_WAIT_FOR_LISTEN      3
	#define AFD_ACCEPT          4
	#define AFD_RECV            5
	#define AFD_RECV_DATAGRAM        6
	#define AFD_SEND            7
	#define AFD_SEND_DATAGRAM        8
	#define AFD_SELECT          9
	#define AFD_DISCONNECT           10
	#define AFD_GET_SOCK_NAME        11
	#define AFD_GET_PEER_NAME               12
	#define AFD_GET_TDI_HANDLES      13
	#define AFD_SET_INFO             14
	#define AFD_GET_CONTEXT          16
	#define AFD_SET_CONTEXT          17
	#define AFD_SET_CONNECT_DATA         18
	#define AFD_SET_CONNECT_OPTIONS      19
	#define AFD_SET_DISCONNECT_DATA      20
	#define AFD_SET_DISCONNECT_OPTIONS   21
	#define AFD_GET_CONNECT_DATA         22
	#define AFD_GET_CONNECT_OPTIONS      23
	#define AFD_GET_DISCONNECT_DATA      24
	#define AFD_GET_DISCONNECT_OPTIONS   25
	#define AFD_SET_CONNECT_DATA_SIZE       26
	#define AFD_SET_CONNECT_OPTIONS_SIZE    27
	#define AFD_SET_DISCONNECT_DATA_SIZE    28
	#define AFD_SET_DISCONNECT_OPTIONS_SIZE 29
	#define AFD_GET_INFO             30
	#define AFD_EVENT_SELECT         33
	#define AFD_ENUM_NETWORK_EVENTS         34
	#define AFD_DEFER_ACCEPT         35
	#define AFD_GET_PENDING_CONNECT_DATA 41
	 
	/* AFD IOCTLs */
	 
	#define IOCTL_AFD_BIND \
	  _AFD_CONTROL_CODE(AFD_BIND, METHOD_NEITHER)
	#define IOCTL_AFD_CONNECT \
	  _AFD_CONTROL_CODE(AFD_CONNECT, METHOD_NEITHER)
	#define IOCTL_AFD_START_LISTEN \
	  _AFD_CONTROL_CODE(AFD_START_LISTEN, METHOD_NEITHER)
	#define IOCTL_AFD_WAIT_FOR_LISTEN \
	  _AFD_CONTROL_CODE(AFD_WAIT_FOR_LISTEN, METHOD_BUFFERED )
	#define IOCTL_AFD_ACCEPT \
	  _AFD_CONTROL_CODE(AFD_ACCEPT, METHOD_BUFFERED )
	#define IOCTL_AFD_RECV \
	  _AFD_CONTROL_CODE(AFD_RECV, METHOD_NEITHER)
	#define IOCTL_AFD_RECV_DATAGRAM \
	  _AFD_CONTROL_CODE(AFD_RECV_DATAGRAM, METHOD_NEITHER)
	#define IOCTL_AFD_SEND \
	  _AFD_CONTROL_CODE(AFD_SEND, METHOD_NEITHER)
	#define IOCTL_AFD_SEND_DATAGRAM \
	  _AFD_CONTROL_CODE(AFD_SEND_DATAGRAM, METHOD_NEITHER)
	#define IOCTL_AFD_SELECT \
	  _AFD_CONTROL_CODE(AFD_SELECT, METHOD_BUFFERED )
	#define IOCTL_AFD_DISCONNECT \
	  _AFD_CONTROL_CODE(AFD_DISCONNECT, METHOD_NEITHER)
	#define IOCTL_AFD_GET_SOCK_NAME \
	  _AFD_CONTROL_CODE(AFD_GET_SOCK_NAME, METHOD_NEITHER)
	#define IOCTL_AFD_GET_PEER_NAME \
	  _AFD_CONTROL_CODE(AFD_GET_PEER_NAME, METHOD_NEITHER)
	#define IOCTL_AFD_GET_TDI_HANDLES \
	  _AFD_CONTROL_CODE(AFD_GET_TDI_HANDLES, METHOD_NEITHER)
	#define IOCTL_AFD_SET_INFO \
	  _AFD_CONTROL_CODE(AFD_SET_INFO, METHOD_NEITHER)
	#define IOCTL_AFD_GET_CONTEXT \
	  _AFD_CONTROL_CODE(AFD_GET_CONTEXT, METHOD_NEITHER)
	#define IOCTL_AFD_SET_CONTEXT \
	  _AFD_CONTROL_CODE(AFD_SET_CONTEXT, METHOD_NEITHER)
	#define IOCTL_AFD_SET_CONNECT_DATA \
	  _AFD_CONTROL_CODE(AFD_SET_CONNECT_DATA, METHOD_NEITHER)
	#define IOCTL_AFD_SET_CONNECT_OPTIONS \
	  _AFD_CONTROL_CODE(AFD_SET_CONNECT_OPTIONS, METHOD_NEITHER)
	#define IOCTL_AFD_SET_DISCONNECT_DATA \
	  _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_DATA, METHOD_NEITHER)
	#define IOCTL_AFD_SET_DISCONNECT_OPTIONS \
	  _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_OPTIONS, METHOD_NEITHER)
	#define IOCTL_AFD_GET_CONNECT_DATA \
	  _AFD_CONTROL_CODE(AFD_GET_CONNECT_DATA, METHOD_NEITHER)
	#define IOCTL_AFD_GET_CONNECT_OPTIONS \
	  _AFD_CONTROL_CODE(AFD_GET_CONNECT_OPTIONS, METHOD_NEITHER)
	#define IOCTL_AFD_GET_DISCONNECT_DATA \
	  _AFD_CONTROL_CODE(AFD_GET_DISCONNECT_DATA, METHOD_NEITHER)
	#define IOCTL_AFD_GET_DISCONNECT_OPTIONS \
	  _AFD_CONTROL_CODE(AFD_GET_DISCONNECT_OPTIONS, METHOD_NEITHER)
	#define IOCTL_AFD_SET_CONNECT_DATA_SIZE \
	  _AFD_CONTROL_CODE(AFD_SET_CONNECT_DATA_SIZE, METHOD_NEITHER)
	#define IOCTL_AFD_SET_CONNECT_OPTIONS_SIZE \
	  _AFD_CONTROL_CODE(AFD_SET_CONNECT_OPTIONS_SIZE, METHOD_NEITHER)
	#define IOCTL_AFD_SET_DISCONNECT_DATA_SIZE \
	  _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_DATA_SIZE, METHOD_NEITHER)
	#define IOCTL_AFD_SET_DISCONNECT_OPTIONS_SIZE \
	  _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_OPTIONS_SIZE, METHOD_NEITHER)
	#define IOCTL_AFD_GET_INFO \
	  _AFD_CONTROL_CODE(AFD_GET_INFO, METHOD_NEITHER)
	#define IOCTL_AFD_EVENT_SELECT \
	  _AFD_CONTROL_CODE(AFD_EVENT_SELECT, METHOD_NEITHER)
	#define IOCTL_AFD_DEFER_ACCEPT \
	  _AFD_CONTROL_CODE(AFD_DEFER_ACCEPT, METHOD_NEITHER)
	#define IOCTL_AFD_GET_PENDING_CONNECT_DATA \
	  _AFD_CONTROL_CODE(AFD_GET_PENDING_CONNECT_DATA, METHOD_NEITHER)
	#define IOCTL_AFD_ENUM_NETWORK_EVENTS \
	  _AFD_CONTROL_CODE(AFD_ENUM_NETWORK_EVENTS, METHOD_NEITHER)

	if (IoControlCode == IOCTL_AFD_RECV)
	{
		W::PAFD_RECV_INFO info = (W::PAFD_RECV_INFO)InputBuffer;

		LOGFN("\tPAFD_RECV_INFO _ = {\n");
		LOGFN("\t"); W::dump_ULONG(info->BufferCount, "BufferCount");

		for (int i=0; i < info->BufferCount; i++)
		{
			LOGFN("\t"); W::dump_contents((const char*)info->BufferArray[i].buf, info->BufferArray[i].len, "BufferArray");
		}
		
		LOGFN("\t"); W::dump_ULONG(info->AfdFlags, "AfdFlags");
		LOGFN("\t"); W::dump_ULONG(info->TdiFlags, "TdiFlags");
		LOGFN("\t}\n");
	}
	else if (IoControlCode == IOCTL_AFD_RECV_DATAGRAM)
	{
		W::PAFD_RECV_INFO_UDP info = (W::PAFD_RECV_INFO_UDP)InputBuffer;

		LOGFN("\tPAFD_RECV_INFO_UDP _ = {\n");
		LOGFN("\t"); W::dump_ULONG(info->BufferCount, "BufferCount");
		
		for (int i=0; i < info->BufferCount; i++)
		{
			LOGFN("\t"); W::dump_contents((const char*)info->BufferArray[i].buf, info->BufferArray[i].len, "BufferArray");
		}
		
		LOGFN("\t"); W::dump_ULONG(info->AfdFlags, "AfdFlags");
		LOGFN("\t"); W::dump_ULONG(info->TdiFlags, "TdiFlags");
		LOGFN("\t"); W::dump_contents((const char*)info->Address, info->AddressLength, "Address");
		LOGFN("\t"); W::dump_ULONG(info->AddressLength, "AddressLength");
		LOGFN("\t}\n");
	}
	else if (IoControlCode == IOCTL_AFD_SEND)
	{
		W::PAFD_SEND_INFO info = (W::PAFD_SEND_INFO)InputBuffer;

		LOGFN("\tPAFD_SEND_INFO _ = {\n");
		LOGFN("\t"); W::dump_ULONG(info->BufferCount, "BufferCount");
		
		for (int i=0; i < info->BufferCount; i++)
		{
			LOGFN("\t"); W::dump_contents((const char*)info->BufferArray[i].buf, info->BufferArray[i].len, "BufferArray");
		}
		
		LOGFN("\t"); W::dump_ULONG(info->AfdFlags, "AfdFlags");
		LOGFN("\t"); W::dump_ULONG(info->TdiFlags, "TdiFlags");
		LOGFN("\t}\n");
	}
	else if (IoControlCode == IOCTL_AFD_SEND_DATAGRAM)
	{
		W::PAFD_SEND_INFO_UDP info = (W::PAFD_SEND_INFO_UDP)InputBuffer;

		LOGFN("\tPAFD_SEND_INFO_UDP _ = {\n");
		LOGFN("\t"); W::dump_ULONG(info->BufferCount, "BufferCount");
		
		for (int i=0; i < info->BufferCount; i++)
		{
			LOGFN("\t"); W::dump_contents((const char*)info->BufferArray[i].buf, info->BufferArray[i].len, "BufferArray");
		}
		
		LOGFN("\t"); W::dump_ULONG(info->AfdFlags, "AfdFlags");

		// TODO: Padding
		LOGFN("\t"); W::dump_ULONG(info->SizeOfRemoteAddress, "SizeOfRemoteAddress");
		LOGFN("\t"); W::dump_contents((const char*)info->RemoteAddress, info->SizeOfRemoteAddress, "RemoteAddress");
		LOGFN("\t}\n");
	}
	else if (IoControlCode == IOCTL_AFD_CONNECT)
	{
		W::PAFD_CONNECT_INFO info = (W::PAFD_CONNECT_INFO)InputBuffer;

		LOGFN("\tPAFD_CONNECT_INFO _ = {\n");
		LOGFN("\t"); W::dump_BOOLEAN(info->UseSAN, "UseSAN");
		LOGFN("\t"); W::dump_ULONG(info->Root, "Root");
		LOGFN("\t"); W::dump_PVOID(info->ConnectionEndpoint, "ConnectionEndpoint");

	#define __htons(A) ((((unsigned short)(A) & 0xff00) >> 8) |  (((unsigned short)(A) & 0x00ff) << 8))
		if (info->RemoteAddress.sa_family == AF_INET)
		{
			W::PSOCKADDR_IN sin4 = (W::PSOCKADDR_IN)&info->RemoteAddress;
			LOGFN("\t\tSOCKADDR RemoteAddress = \"\"\"%hu.%hu.%hu.%hu:%hu\"\"\"\n",
			    (short)((sin4->sin_addr.s_addr >> 24) & 0xff),
			    (short)((sin4->sin_addr.s_addr >> 16) & 0xff),
			    (short)((sin4->sin_addr.s_addr >> 8) & 0xff),
				(short)(sin4->sin_addr.s_addr & 0xff), __htons(sin4->sin_port)
			);
		}
		else if (info->RemoteAddress.sa_family == AF_INET6)
		{
			// TODO: implement me
		}

		LOGFN("\t}\n");
	}

[predump-IoControlCode]
code: // Pre control
[postdump-IoControlCode]
code: // Post control